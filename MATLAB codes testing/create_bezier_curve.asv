function [x y] = create_bezier_curve(P0,P3,v0,v3,nb)
% this code crates a bezier curve based on a starting and ending point and
% based on a starting and ending vector that represent the direction of the
% car on each position

% Normalize direction vectors
v0 = v0 / norm(v0);
v3 = v3 / norm(v3);

% Calculate control points P1 and P2
d = norm(P3 - P0) / 3; % Distance from P0 to P1 and P2 to P3
P1 = P0 + d * v0;
P2 = P3 - d * v3;

% Create a finer grid for interpolation
t = linspace(0, 1, 30);

% Calculate the Bézier curve
x = (1-t).^3 * P0(1) + 3*(1-t).^2 .* t * P1(1) + 3*(1-t) .* t.^2 * P2(1) + t.^3 * P3(1);
y = (1-t).^3 * P0(2) + 3*(1-t).^2 .* t * P1(2) + 3*(1-t) .* t.^2 * P2(2) + t.^3 * P3(2);

% Calculate the derivatives
dx_dt = -3*(1-t).^2 * P0(1) + 3*(1-4*t+3*t.^2) * P1(1) + 3*(2*t-3*t.^2) * P2(1) + 3*t.^2 * P3(1);
dy_dt = -3*(1-t).^2 * P0(2) + 3*(1-4*t+3*t.^2) * P1(2) + 3*(2*t-3*t.^2) * P2(2) + 3*t.^2 * P3(2);
d2x_dt2 = 6*(1-t) * P0(1) + 6*(3*t-2) * P1(1) + 6*(1-3*t) * P2(1) + 6*t * P3(1);
d2y_dt2 = 6*(1-t) * P0(2) + 6*(3*t-2) * P1(2) + 6*(1-3*t) * P2(2) + 6*t * P3(2);

% Calculate the curvature
curvature = abs(dx_dt .* d2y_dt2 - dy_dt .* d2x_dt2) ./ (dx_dt.^2 + dy_dt.^2).^(3/2);

% Calculate steering angle in degree
l=15;%specfify car length
radius = 1 ./ curvature;
steering_angle= rad2deg(atan(15*curvature));
%steering_angle= rad2deg(atan(sqrt((l*l)/(radius*radius-(l*l)/4))));

% Plot the result
figure(1);
plot(x, y);
hold on;
plot(P0(1), P0(2), 'ro');
%plot(P1(1), P1(2), 'go');
%plot(P2(1), P2(2), 'go');
plot(P3(1), P3(2), 'ro');
legend('Bézier Curve', 'Start/End Points');

figure(2);
%plot(t, curvature);
xlabel('t');
ylabel('angle');
title('Steering Angle');
t=t+nb-1;
plot(t, steering_angle);
%legend('Curvature', 'steering angle');


end